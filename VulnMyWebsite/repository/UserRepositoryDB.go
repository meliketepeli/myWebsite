package repository

import (
	"context"
	"errors"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"log"
	"myWebsite-main/models"
	"time"
)

type UserRepositoryDB struct {
	UserCollection *mongo.Collection
	// buradan ekleme silme guncelleme gibi islemleri yapacagÄ±z
}

type UserRepository interface {
	Insert(user models.User) (bool, error)
	//bool yerine string de olabilir

	// tum verileri almak iÃ§in bir fonksiyon oluÅŸturduk ve bu fonksiyon array olmalÄ±
	GetAll() ([]models.User, error)

	//delete oluÅŸturuyoruz
	Delete(id primitive.ObjectID) (bool, error)
	

	FindOne(ctx context.Context, filter bson.M) (*models.User, error) // ğŸ”´ NoSQL Injection
}

type DefaultUserRepository struct {
	Collection *mongo.Collection
}

func (r DefaultUserRepository) Insert(user models.User) (bool, error) {
	_, err := r.Collection.InsertOne(context.TODO(), user)
	if err != nil {
		return false, err
	}
	return true, nil
}

func (u *UserRepositoryDB) Insert(user models.User) (bool, error) {

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	// dÃ¼ÅŸÃ¼n bir kanal acmÄ±ÅŸsÄ±n
	//10 saniye baÄŸlanmayÄ± dene demek
	defer cancel()
	// en son defer calÄ±sÄ±r

	user.Id = primitive.NewObjectID()
	// bunu farklÄ± object id versin diye yazdÄ±k generate etsin

	result, err := u.UserCollection.InsertOne(ctx, user)

	if err != nil || result.InsertedID == nil {
		errors.New("Failed to insert user")
		return false, err
	}
	log.Println("BaÅŸarÄ±lÄ± ÅŸekilde user eklendi eklenen user : ", user)
	return true, nil
}

func (r DefaultUserRepository) GetAll() ([]models.User, error) {
	cursor, err := r.Collection.Find(context.TODO(), bson.M{})
	if err != nil {
		return nil, err
	}

	var users []models.User
	if err := cursor.All(context.TODO(), &users); err != nil {
		return nil, err
	}
	return users, nil
}

func (u *UserRepositoryDB) GetAll() ([]models.User, error) {

	var user models.User    // bir eleman
	var users []models.User // birden fazla
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	// baglantÄ± actÄ±k
	defer cancel()

	result, err := u.UserCollection.Find(ctx, bson.M{})
	// aÃ§tÄ±ÄŸÄ±m yolu verdim, result a aldÄ±gÄ±m dokumanlarÄ± verdim

	if err != nil {
		//log.Fatalln(err)
		log.Println("MongoDB'den kullanÄ±cÄ± verisi alÄ±nÄ±rken hata oluÅŸtu:", err)
		return nil, err

	}

	// tek tek bu verdiÄŸim dokumanlarÄ± almam lazÄ±m!!!
	// tekrar baglantÄ± yolunu actÄ±m
	for result.Next(ctx) {
		// eger documentta decode edebilecegim bir sey varsa decodela, user a ata
		if err := result.Decode(&user); err != nil {
			// log.Fatalln(err)
			log.Println("Document decode edilirken hata oluÅŸtu:", err)
			return nil, err
		}
		// eger decode gerek yoksa ekle
		users = append(users, user)

	}
	// DÃ¶ngÃ¼ sonunda, eÄŸer hata varsa onu dÃ¶ndÃ¼relim
	if err := result.Err(); err != nil {
		log.Println("DÃ¶ngÃ¼ sÄ±rasÄ±nda hata oluÅŸtu:", err)
		return nil, err
	}

	log.Println("BaÅŸarÄ±yla eklenen users:", users)
	return users, nil
}

func (u *UserRepositoryDB) Delete(id primitive.ObjectID) (bool, error) {

	// once bir kanal oluÅŸturuyoruz
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	result, err := u.UserCollection.DeleteOne(ctx, bson.M{"id": id})

	if err != nil || result.DeletedCount <= 0 {
		return false, err
	}
	return true, nil
}

func (r DefaultUserRepository) Delete(id string) (bool, error) {
	filter := bson.M{"_id": id}
	result, err := r.Collection.DeleteOne(context.TODO(), filter)
	if err != nil || result.DeletedCount == 0 {
		return false, err
	}
	return true, nil
}

// ğŸ”´ NoSQL Injection 
func (r DefaultUserRepository) FindOne(ctx context.Context, filter bson.M) (*models.User, error) {
	var user models.User
	err := r.Collection.FindOne(ctx, filter).Decode(&user)
	if err != nil {
		return nil, err
	}
	return &user, nil
}



func NewUserRepositoryDB(dbClient *mongo.Collection) *UserRepositoryDB {

	return &UserRepositoryDB{dbClient}
}
